(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{124:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return l})),t.d(a,"metadata",(function(){return c})),t.d(a,"toc",(function(){return m})),t.d(a,"default",(function(){return b}));var n=t(3),r=t(7),i=(t(0),t(152)),s=t(156),o=t(157),l={id:"comparison",title:"Comparison",sidebar_label:"Comparison"},c={unversionedId:"getting_started/comparison",id:"getting_started/comparison",isDocsHomePage:!1,title:"Comparison",description:"There's a reason we started investing so many hours and so many new grey hairs into writing PopGen.jl when there was an existing ecosystem in R to perform these same tasks. Like we explain in the home page of these docs, we want a platform that is:",source:"@site/docs/getting_started/comparison.md",slug:"/getting_started/comparison",permalink:"/PopGen.jl/docs/getting_started/comparison",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/getting_started/comparison.md",version:"current",lastUpdatedAt:1615401153,formattedLastUpdatedAt:"3/10/2021",sidebar_label:"Comparison",sidebar:"docs",previous:{title:"A quick Julia primer",permalink:"/PopGen.jl/docs/getting_started/julia_primer"},next:{title:"PopObj and PopData types",permalink:"/PopGen.jl/docs/getting_started/types"}},m=[{value:"Benchmarks",id:"benchmarks",children:[{value:"Reading in data",id:"reading-in-data",children:[]},{value:"<code>PopData</code> vs <code>genind</code> size",id:"popdata-vs-genind-size",children:[]},{value:"Summary statistics",id:"summary-statistics",children:[]},{value:"Chi-squared test for HWE",id:"chi-squared-test-for-hwe",children:[]},{value:"Pairwise FST",id:"pairwise-fst",children:[]}]}],p={toc:m};function b(e){var a=e.components,l=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,l,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,"There's a reason we started investing so many hours and so many new grey hairs into writing PopGen.jl when there was an existing ecosystem in R to perform these same tasks. Like we explain in the home page of these docs, we want a platform that is:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"fast(er)"),Object(i.b)("li",{parentName:"ol"},"written in a single language"),Object(i.b)("li",{parentName:"ol"},"easy to use")),Object(i.b)("p",null,"So, we'd like to prove that Julia and PopGen.jl actually achieves that by showing a few benchmarks comparing PopGen.jl to popular population genetics packages in R. It's worth mentioning that we ourselves use and have published work incorporating these packages, and are incredibly grateful for the work invested in them. We appreciate those folks and have tremendous respect and envy for the work they continue to do! Here are links to ",Object(i.b)("a",{parentName:"p",href:"https://github.com/thibautjombart/adegenet"},"adegenet"),", ",Object(i.b)("a",{parentName:"p",href:"https://academic.oup.com/bioinformatics/article/26/3/419/215731/"},"pegas"),", ",Object(i.b)("a",{parentName:"p",href:"https://cran.r-project.org/web/packages/hierfstat/index.html"},"hierfstat"),", and ",Object(i.b)("a",{parentName:"p",href:"https://cran.r-project.org/package=ape"},"ape"),".  "),Object(i.b)("h2",{id:"benchmarks"},"Benchmarks"),Object(i.b)("p",null,"To make this a practical comparison, we're going to use the ",Object(i.b)("inlineCode",{parentName:"p"},"gulfsharks")," data because it is considerably larger (212 samples x 2209 loci) than ",Object(i.b)("inlineCode",{parentName:"p"},"nancycats"),' (237 x 9) and a bit more of a "stress test".  All benchmarks in R are performed using the ',Object(i.b)("inlineCode",{parentName:"p"},"microbenchmark")," package, and  ",Object(i.b)("inlineCode",{parentName:"p"},"BenchmarkTools")," are used for Julia."),Object(i.b)(s.a,{block:!0,defaultValue:"j",values:[{label:"load Julia packages",value:"j"},{label:"load R packages",value:"r"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"j",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},"using BenchmarkTools, PopGen\n"))),Object(i.b)(o.a,{value:"r",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-r"},"library(adegenet)\nlibrary(pegas)\nlibrary(hierfstat)\nlibrary(microbenchmark)\n")))),Object(i.b)("p",null,"As a note, the reported benchmarks are being performed on a 64-bit Manjaro Linux system on a nothing-special Lenovo Thinkbook 14S  with 8gigs of RAM and a 8th gen Intel i5 mobile processor. ",Object(i.b)("strong",{parentName:"p"},"Note:")," all of the Julia benchmarks, unless explicitly stated, are performed single-threaded (i.e. not parallel, distributed, or GPU)."),Object(i.b)("h3",{id:"reading-in-data"},"Reading in data"),Object(i.b)("p",null,"Since ",Object(i.b)("inlineCode",{parentName:"p"},"gulfsharks")," is shamelessly provided in PopGen.jl, we will just load it with ",Object(i.b)("inlineCode",{parentName:"p"},"genepop()"),".  If you would like to try this yourself in R, find the ",Object(i.b)("inlineCode",{parentName:"p"},"gulfsharks.gen")," file in the package repository under ",Object(i.b)("inlineCode",{parentName:"p"},"/data/source/gulfsharks.gen"),". Since the file importer now uses CSV.jl to read files, there is one step of the genepop parser that is multithreaded. However, the majority of the data parsing (formatting the raw data into a correct PopData structure) occurs using a single thread. This R benchmark will take a few minutes. Consider making some tea while you wait."),Object(i.b)(s.a,{block:!0,defaultValue:"j",values:[{label:"Julia",value:"j"},{label:"R",value:"r"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"j",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'@benchmark sharks = genepop("data/source/gulfsharks.gen", silent = true)\nBenchmarkTools.Trial:\n  memory estimate:  330.58 MiB\n  allocs estimate:  6905285\n  --------------\n  minimum time:     806.202 ms (5.91% GC)\n  median time:      884.887 ms (5.61% GC)\n  mean time:        910.722 ms (5.41% GC)\n  maximum time:     1.071 s (4.82% GC)\n  --------------\n  samples:          6\n  evals/sample:     1\n'))),Object(i.b)(o.a,{value:"r",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-r"},'> microbenchmark(read.genepop(file = "/home/pdimens/gulfsharks.gen", ncode = 3L, quiet = TRUE))\nUnit: seconds\n read.genepop(file = "/home/pdimens/gulfsharks.gen", ncode = 3L, quiet = FALSE)\n      min       lq     mean   median       uq      max neval\n 5.670637 6.218719 6.745065 6.387936 7.019667 9.173005   100\nmicrobenchmark)\n')))),Object(i.b)("p",null,Object(i.b)("img",{alt:"import plot",src:t(241).default})),Object(i.b)("p",null,"Comparing averages, PopGen.jl clocks in at ",Object(i.b)("inlineCode",{parentName:"p"},"910ms")," versus adegenet's ",Object(i.b)("inlineCode",{parentName:"p"},"6.745s")," , so ~7.4x faster."),Object(i.b)("h3",{id:"popdata-vs-genind-size"},Object(i.b)("inlineCode",{parentName:"h3"},"PopData")," vs ",Object(i.b)("inlineCode",{parentName:"h3"},"genind")," size"),Object(i.b)("p",null,'It was pretty tricky to come up with a sensible/efficient/convenient data structure for PopGen.jl, and while the two-DataFrames design might not seem like it took a lot of effort, we ultimately decided that the column-major style and available tools, combined with careful genotype Typing was a decent "middle-ground" of ease-of-use vs performance.'),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Anyway"),", it's important to understand how much space your data will take up in memory (your RAM) when you load it in, especially since data's only getting bigger! Keep in mind that ",Object(i.b)("inlineCode",{parentName:"p"},"gulfsharks")," in PopGen.jl also provides lat/long data, which ",Object(i.b)("em",{parentName:"p"},"should")," inflate the size of the object somewhat compared to the ",Object(i.b)("inlineCode",{parentName:"p"},"genind"),", which we won't add any location data to."),Object(i.b)(s.a,{block:!0,defaultValue:"j",values:[{label:"Julia",value:"j"},{label:"R",value:"r"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"j",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},"julia> Base.summarysize(sharks)\n3527765\n#bytes\n"))),Object(i.b)(o.a,{value:"r",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-r"},"> object.size(gen)\n5331536 bytes\n")))),Object(i.b)("p",null,Object(i.b)("img",{alt:"data structure plot",src:t(242).default})),Object(i.b)("p",null,"The original file is ",Object(i.b)("inlineCode",{parentName:"p"},"3.2mb")," (the horizontal line), and our ",Object(i.b)("inlineCode",{parentName:"p"},"PopData")," object takes up ~",Object(i.b)("inlineCode",{parentName:"p"},"3.5mb")," in memory (300kb larger than the source file) versus the ~",Object(i.b)("inlineCode",{parentName:"p"},"5.3mb")," of a ",Object(i.b)("inlineCode",{parentName:"p"},"genind"),", which is ~1.5x larger than the source file. That's quite a big difference!"),Object(i.b)("h3",{id:"summary-statistics"},"Summary statistics"),Object(i.b)("p",null,"The obvious hallmark of population genetics is heterozygosity values and F-statistics. Here we'll compare the basic summary statistics that can be produced using ",Object(i.b)("inlineCode",{parentName:"p"},"hierfstat")," and ",Object(i.b)("inlineCode",{parentName:"p"},"PopGen.jl"),"."),Object(i.b)(s.a,{block:!0,defaultValue:"j",values:[{label:"Julia",value:"j"},{label:"R",value:"r"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"j",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},'julia> @benchmark summary(sharks, by = "global")\nBenchmarkTools.Trial:\n  memory estimate:  88.42 MiB\n  allocs estimate:  1307128\n  --------------\n  minimum time:     151.963 ms (0.00% GC)\n  median time:      171.484 ms (7.60% GC)\n  mean time:        172.456 ms (6.08% GC)\n  maximum time:     186.606 ms (7.04% GC)\n  --------------\n  samples:          29\n  evals/sample:     1\n'))),Object(i.b)(o.a,{value:"r",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-r"},"> microbenchmark(basic.stats(gen))\nUnit: seconds\n             expr      min       lq     mean\n basic.stats(gen) 4.276996 4.425934 4.618796\n   median       uq      max neval\n 4.609901 4.706666 5.292831   100\n")))),Object(i.b)("p",null,Object(i.b)("img",{alt:"summary statistics plot",src:t(243).default})),Object(i.b)("p",null,"Comparing averages, PopGen.jl clocks in at ~",Object(i.b)("inlineCode",{parentName:"p"},"171ms")," versus hierfstat's ",Object(i.b)("inlineCode",{parentName:"p"},"4.6s"),", which is ~",Object(i.b)("strong",{parentName:"p"},"27x")," faster on these data. However, when testing on a data that was 401 samples x 5331 loci (not shown), PopGen.jl performed 36.6x faster. This gap seems to increase the larger the data is, but we have not tested the upper limits of this."),Object(i.b)("h3",{id:"chi-squared-test-for-hwe"},"Chi-squared test for HWE"),Object(i.b)("p",null,"This is a classic population genetics test and a relatively simple one. The R benchmark will take a while again, so if you're following along, this would be a good time to reconnect with an old friend."),Object(i.b)(s.a,{block:!0,defaultValue:"j",values:[{label:"Julia",value:"j"},{label:"R",value:"r"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"j",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},"julia> @benchmark hwe_test(sharks)\nBenchmarkTools.Trial:\n  memory estimate:  46.22 MiB\n  allocs estimate:  1050525\n  --------------\n  minimum time:     145.476 ms (0.00% GC)\n  median time:      179.146 ms (4.35% GC)\n  mean time:        176.142 ms (3.56% GC)\n  maximum time:     204.813 ms (0.00% GC)\n  --------------\n  samples:          29\n  evals/sample:     1\n"))),Object(i.b)(o.a,{value:"r",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-r"},"> microbenchmark(hw.test(gen, B = 0))\nUnit: seconds\n                expr      min       lq     mean   median       uq      max neval\n hw.test(gen, B = 0) 5.100298 5.564807 6.265948 5.878842 6.917006 8.815179   100\n")))),Object(i.b)("p",null,Object(i.b)("img",{alt:"chi squared plot",src:t(244).default})),Object(i.b)("p",null,"Comparing averages, PopGen.jl clocks in at ~",Object(i.b)("inlineCode",{parentName:"p"},"176ms")," versus adegenet's ",Object(i.b)("inlineCode",{parentName:"p"},"6.3s"),", so ~",Object(i.b)("strong",{parentName:"p"},"35.8x")," faster on these data(!)"),Object(i.b)("h3",{id:"pairwise-fst"},"Pairwise FST"),Object(i.b)("p",null,"You all know it, you all love it. What's population genetics without a little pairwise FST sprinkled in? This benchmark compairs the Weir & Cockerham pairwise FST calculation in ",Object(i.b)("inlineCode",{parentName:"p"},"PopGen.jl")," against ",Object(i.b)("inlineCode",{parentName:"p"},"hierfstat")),Object(i.b)(s.a,{block:!0,defaultValue:"j",values:[{label:"Julia",value:"j"},{label:"Julia (parallel)",value:"jp"},{label:"R",value:"r"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"j",mdxType:"TabItem"},Object(i.b)("p",null,"We will add the extra keywords ",Object(i.b)("inlineCode",{parentName:"p"},"samples")," and ",Object(i.b)("inlineCode",{parentName:"p"},"seconds")," to the benchmark\nmacro so we can get a full 100 evaluations."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},"julia> @benchmark pairwise_fst(sharks) samples = 100 seconds = 700\nBenchmarkTools.Trial:\n  memory estimate:  1.26 GiB_pairwise_WeirCockerham\n  allocs estimate:  8024669\n\n  --------------\n  minimum time:     1.102 s (11.11% GC)\n  median time:      1.147 s (12.68% GC)\n  mean time:        1.170 s (13.25% GC)\n  maximum time:     1.474 s (29.64% GC)\n  --------------\n  samples:          100\n  evals/sample:     1\n"))),Object(i.b)(o.a,{value:"jp",mdxType:"TabItem"},Object(i.b)("p",null,"This is demonstrate what the speed is like when starting Julia with 4 available threads via ",Object(i.b)("inlineCode",{parentName:"p"},"julia --threads 4")," (julia >= v1.5) or ",Object(i.b)("inlineCode",{parentName:"p"},"JULIA_NUM_THREADS=4")," (< v1.5)."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},"julia> @benchmark pairwise_fst(sharks) samples = 100 seconds = 700\nBenchmarkTools.Trial: \n  memory estimate:  1.26 GiB\n  allocs estimate:  8024707\n  --------------\n  minimum time:     654.677 ms (24.79% GC)\n  median time:      787.848 ms (26.16% GC)\n  mean time:        804.779 ms (26.32% GC)\n  maximum time:     1.308 s (18.52% GC)\n  --------------\n  samples:          100\n  evals/sample:     1\n"))),Object(i.b)(o.a,{value:"r",mdxType:"TabItem"},Object(i.b)("p",null,"We'll need to convert ",Object(i.b)("inlineCode",{parentName:"p"},"sharks")," into the matrix/dataframe ",Object(i.b)("inlineCode",{parentName:"p"},"hierfstat")," needs\nto run this calculation. The conversion will be a separate step so as not\nto add unnecessary (or unfair) overhead to the benchmark. This benchmark is\ngoing to take ",Object(i.b)("strong",{parentName:"p"},"forever")," (200s/run x 100 runs = 5.5hrs), so if you absolutely insist on\ntrying it out yourself, you may want to pop outside and enjoy some fresh\nair for a bit (I ran it overnight). Seriously, you don't want to watch this paint dry \ud83d\udd8c\ufe0f."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-r"},"> sharks_hierf <- genind2hierfstat(sharks)\n\n> microbenchmark(pairwise.WCfst(sharks_hierf))\nUnit: seconds\n                    expr      min       lq     mean   median       uq      max neval\n pairwise.WCfst(sharks2) 192.2786 192.9277 199.4861 193.5743 195.0079 301.6879   100\n")))),Object(i.b)("p",null,Object(i.b)("img",{alt:"pairwise fst plot",src:t(245).default})),Object(i.b)("p",null,"On a single thread, pairwise FST in ",Object(i.b)("inlineCode",{parentName:"p"},"PopGen.jl")," is ",Object(i.b)("strong",{parentName:"p"},"~170x")," faster than in ",Object(i.b)("inlineCode",{parentName:"p"},"hierfstat"),", and a whopping ",Object(i.b)("strong",{parentName:"p"},"248x")," faster using 4 threads. Daaaang!"))}b.isMDXComponent=!0},152:function(e,a,t){"use strict";t.d(a,"a",(function(){return p})),t.d(a,"b",(function(){return d}));var n=t(0),r=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),m=function(e){var a=r.a.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=m(e.components);return r.a.createElement(c.Provider,{value:a},e.children)},b={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},u=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=m(t),u=n,d=p["".concat(s,".").concat(u)]||p[u]||b[u]||i;return t?r.a.createElement(d,o(o({ref:a},c),{},{components:t})):r.a.createElement(d,o({ref:a},c))}));function d(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,s=new Array(i);s[0]=u;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},153:function(e,a,t){"use strict";function n(e){var a,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(t=n(e[a]))&&(r&&(r+=" "),r+=t);else for(a in e)e[a]&&(r&&(r+=" "),r+=a);return r}a.a=function(){for(var e,a,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(a=n(e))&&(r&&(r+=" "),r+=a);return r}},154:function(e,a,t){"use strict";var n=t(0),r=t(155);a.a=function(){var e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},155:function(e,a,t){"use strict";var n=t(0),r=Object(n.createContext)(void 0);a.a=r},156:function(e,a,t){"use strict";var n=t(0),r=t.n(n),i=t(154),s=t(153),o=t(55),l=t.n(o);var c=37,m=39;a.a=function(e){var a=e.lazy,t=e.block,o=e.defaultValue,p=e.values,b=e.groupId,u=e.className,d=Object(i.a)(),h=d.tabGroupChoices,g=d.setTabGroupChoices,f=Object(n.useState)(o),j=f[0],O=f[1],v=n.Children.toArray(e.children),y=[];if(null!=b){var w=h[b];null!=w&&w!==j&&p.some((function(e){return e.value===w}))&&O(w)}var k=function(e){var a=e.target,t=y.indexOf(a),n=v[t].props.value;O(n),null!=b&&(g(b,n),setTimeout((function(){var e,t,n,r,i,s,o,c;(e=a.getBoundingClientRect(),t=e.top,n=e.left,r=e.bottom,i=e.right,s=window,o=s.innerHeight,c=s.innerWidth,t>=0&&i<=c&&r<=o&&n>=0)||(a.scrollIntoView({block:"center",behavior:"smooth"}),a.classList.add(l.a.tabItemActive),setTimeout((function(){return a.classList.remove(l.a.tabItemActive)}),2e3))}),150))},N=function(e){var a,t;switch(e.keyCode){case m:var n=y.indexOf(e.target)+1;t=y[n]||y[0];break;case c:var r=y.indexOf(e.target)-1;t=y[r]||y[y.length-1]}null===(a=t)||void 0===a||a.focus()};return r.a.createElement("div",{className:"tabs-container"},r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":t},u)},p.map((function(e){var a=e.value,t=e.label;return r.a.createElement("li",{role:"tab",tabIndex:j===a?0:-1,"aria-selected":j===a,className:Object(s.a)("tabs__item",l.a.tabItem,{"tabs__item--active":j===a}),key:a,ref:function(e){return y.push(e)},onKeyDown:N,onFocus:k,onClick:k},t)}))),a?Object(n.cloneElement)(v.filter((function(e){return e.props.value===j}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},v.map((function(e,a){return Object(n.cloneElement)(e,{key:a,hidden:e.props.value!==j})}))))}},157:function(e,a,t){"use strict";var n=t(0),r=t.n(n);a.a=function(e){var a=e.children,t=e.hidden,n=e.className;return r.a.createElement("div",{role:"tabpanel",hidden:t,className:n},a)}},241:function(e,a,t){"use strict";t.r(a),a.default=t.p+"assets/images/speedplot-a0dcb588e1923961a9aaf9e183490011.png"},242:function(e,a,t){"use strict";t.r(a),a.default=t.p+"assets/images/objectplot-ec422864760c5133e262eec866a62f7c.png"},243:function(e,a,t){"use strict";t.r(a),a.default=t.p+"assets/images/sumstatplot-598f7c700e09791e891c6f574ce057fc.png"},244:function(e,a,t){"use strict";t.r(a),a.default=t.p+"assets/images/chisqplot-94c0d817b3b77543f63ae472bbde4d6a.png"},245:function(e,a,t){"use strict";t.r(a),a.default=t.p+"assets/images/fstplot-bfe0d5659324b1caad91d9f473741030.png"}}]);