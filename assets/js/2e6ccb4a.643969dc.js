(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{151:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return u}));var a=t(0),i=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=i.a.createContext({}),b=function(e){var n=i.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=b(e.components);return i.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=b(t),m=a,u=c["".concat(r,".").concat(m)]||c[m]||d[m]||o;return t?i.a.createElement(u,l(l({ref:n},p),{},{components:t})):i.a.createElement(u,l({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<o;p++)r[p]=t[p];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},90:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return b}));var a=t(3),i=t(7),o=(t(0),t(151)),r={id:"pairwiserelatedness",title:"PairwiseRelatedness.jl",sidebar_label:"PairwiseRelatedness.jl"},l={unversionedId:"api/pairwiserelatedness",id:"api/pairwiserelatedness",isDocsHomePage:!1,title:"PairwiseRelatedness.jl",description:"bootstrap_summary",source:"@site/docs/api/PairwiseRelatedness.md",slug:"/api/pairwiserelatedness",permalink:"/PopGen.jl/docs/api/pairwiserelatedness",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/api/PairwiseRelatedness.md",version:"current",lastUpdatedAt:1605726478,formattedLastUpdatedAt:"11/18/2020",sidebar_label:"PairwiseRelatedness.jl",sidebar:"docs",previous:{title:"Manipulate.jl",permalink:"/PopGen.jl/docs/api/manipulate"},next:{title:"Permutations.jl",permalink:"/PopGen.jl/docs/api/permutations"}},s=[{value:"<code>bootstrap_summary</code>",id:"bootstrap_summary",children:[]},{value:"<code>bootstrap_genos_all</code>",id:"bootstrap_genos_all",children:[]},{value:"<code>bootstrap_genos_nonmissing</code>",id:"bootstrap_genos_nonmissing",children:[]},{value:"<code>relatedness_boot_all</code>",id:"relatedness_boot_all",children:[]},{value:"<code>relatedness_boot_nonmissing</code>",id:"relatedness_boot_nonmissing",children:[]},{value:"<code>relatedness_no_boot</code>",id:"relatedness_no_boot",children:[]},{value:"<code>relatedness</code>",id:"relatedness",children:[]}],p={toc:s};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"bootstrap_summary"},Object(o.b)("inlineCode",{parentName:"h3"},"bootstrap_summary")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-julia"},"    bootstrap_summary(::Vector{Union{Missing, Float64}}, width::Tuple{Float64, Float64})\n")),Object(o.b)("p",null,"Return the mean, median, standard error, and quantiles (given by ",Object(o.b)("inlineCode",{parentName:"p"},"witdth"),") of relatedness resampling."),Object(o.b)("hr",null),Object(o.b)("h3",{id:"bootstrap_genos_all"},Object(o.b)("inlineCode",{parentName:"h3"},"bootstrap_genos_all")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"bootstrap_genos_all(ind1::GenoArray, ind2::GenoArray, locus_names::Vector{Symbol}, n_per_loc::Vector{Int}, alleles::NamedTuple; method::Function, iterations::Int)\n")),Object(o.b)("p",null,"Perform ",Object(o.b)("inlineCode",{parentName:"p"},"iterations")," number of bootstrap resampling iterations of all genotypes between pair (",Object(o.b)("inlineCode",{parentName:"p"},"ind1")," ",Object(o.b)("inlineCode",{parentName:"p"},"ind2"),"). Returns a vector of length ",Object(o.b)("inlineCode",{parentName:"p"},"interatotions"),"\nof the relatedness estimate given by method ",Object(o.b)("inlineCode",{parentName:"p"},"method"),". This is an internal function with ",Object(o.b)("inlineCode",{parentName:"p"},"locus_names"),", ",Object(o.b)("inlineCode",{parentName:"p"},"n_per_loc"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"alleles")," supplied by ",Object(o.b)("inlineCode",{parentName:"p"},"relatedness_boot_all"),"."),Object(o.b)("hr",null),Object(o.b)("h3",{id:"bootstrap_genos_nonmissing"},Object(o.b)("inlineCode",{parentName:"h3"},"bootstrap_genos_nonmissing")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"bootstrap_genos_nonmissing(ind1::GenoArray, ind2::GenoArray, locus_names::Vector{Symbol}, n_per_loc::Vector{Int}, alleles::NamedTuple; method::Function, iterations::Int)\n")),Object(o.b)("p",null,"Perform ",Object(o.b)("inlineCode",{parentName:"p"},"iterations")," number of bootstrap resampling iterations of only shared (nonmissing) genotypes between pair (",Object(o.b)("inlineCode",{parentName:"p"},"ind1")," ",Object(o.b)("inlineCode",{parentName:"p"},"ind2"),"). Returns a vector of length ",Object(o.b)("inlineCode",{parentName:"p"},"interatotions"),"\nof the relatedness estimate given by method ",Object(o.b)("inlineCode",{parentName:"p"},"method"),". This is an internal function with ",Object(o.b)("inlineCode",{parentName:"p"},"locus_names"),", ",Object(o.b)("inlineCode",{parentName:"p"},"n_per_loc"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"alleles")," supplied by ",Object(o.b)("inlineCode",{parentName:"p"},"relatedness_boot_nonmissing"),"."),Object(o.b)("hr",null),Object(o.b)("h3",{id:"relatedness_boot_all"},Object(o.b)("inlineCode",{parentName:"h3"},"relatedness_boot_all")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"relatedness_boot_all(::PopData, sample_names::Vector{String}; method::Function, iterations::Int, interval::Tuple{Float64, Float64})\n")),Object(o.b)("p",null,"Calculate pairwise relatedness between all combinations of the provided ",Object(o.b)("inlineCode",{parentName:"p"},"sample_names")," for each ",Object(o.b)("inlineCode",{parentName:"p"},"method")," provided. Bootstrapping resamples using\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"all")," method, where resampling occurs over all loci. This is an internal function with all arguments provided by ",Object(o.b)("inlineCode",{parentName:"p"},"relatedness"),"."),Object(o.b)("hr",null),Object(o.b)("h3",{id:"relatedness_boot_nonmissing"},Object(o.b)("inlineCode",{parentName:"h3"},"relatedness_boot_nonmissing")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"relatedness_boot_nonmissing(::PopData, sample_names::Vector{String}; method::F, iterations::Int, interval::Tuple{Float64, Float64}) where F\n")),Object(o.b)("p",null,"Calculate pairwise relatedness between all combinations of the provided ",Object(o.b)("inlineCode",{parentName:"p"},"sample_names")," for each ",Object(o.b)("inlineCode",{parentName:"p"},"method")," provided. Bootstrapping resamples using\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"nonmissing")," method, where resampling occurs over only shared non-missing loci. This is an internal function with all arguments provided by ",Object(o.b)("inlineCode",{parentName:"p"},"relatedness"),"."),Object(o.b)("hr",null),Object(o.b)("h3",{id:"relatedness_no_boot"},Object(o.b)("inlineCode",{parentName:"h3"},"relatedness_no_boot")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"relatedness_no_boot(::PopData, sample_names::Vector{String}; method::F) where F\n")),Object(o.b)("p",null,"Calculate pairwise relatedness between all combinations of the provided ",Object(o.b)("inlineCode",{parentName:"p"},"sample_names")," for each ",Object(o.b)("inlineCode",{parentName:"p"},"method")," provided.\nThis is an internal function with arguments provided by ",Object(o.b)("inlineCode",{parentName:"p"},"relatedness"),"."),Object(o.b)("hr",null),Object(o.b)("h3",{id:"relatedness"},Object(o.b)("inlineCode",{parentName:"h3"},"relatedness")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"# compare all samples\nrelatedness(::PopData; method::Function, iterations::Int64, interval::Tuple{Float64, Float64}, resample::String, inbreeding::Bool = false)\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"# to compare specific samples\nrelatedness(::PopData, samples; method::F, iterations::Int64, interval::Tuple{Float64, Float64}, resample::String, inbreeding::Bool = false)\n")),Object(o.b)("p",null,"Return a dataframe of pairwise relatedness estimates for all or select pairs of ",Object(o.b)("inlineCode",{parentName:"p"},"samples")," in a ",Object(o.b)("inlineCode",{parentName:"p"},"PopData")," object using\nmethod(s) ",Object(o.b)("inlineCode",{parentName:"p"},"F")," where ",Object(o.b)("inlineCode",{parentName:"p"},"F")," is one or several of the methods listed below. If no bootstrapping is required, then the only\nnecessary keyword to provide is ",Object(o.b)("inlineCode",{parentName:"p"},"method = ")," and ",Object(o.b)("inlineCode",{parentName:"p"},"inbreeding = ")," for the ",Object(o.b)("inlineCode",{parentName:"p"},"dyadicLikelihood")," method (see examples below). ",Object(o.b)("strong",{parentName:"p"},"Note:")," samples must be diploid."),Object(o.b)("h4",{id:"estimator-methods"},"Estimator methods"),Object(o.b)("p",null,"The available estimators are listed below and are functions themselves. ",Object(o.b)("inlineCode",{parentName:"p"},"relatedness")," takes the\nfunction names as arguments (",Object(o.b)("strong",{parentName:"p"},"case sensitive"),"), therefore do not use quotes or colons\nin specifying the methods. Multiple methods can be supplied as a vector. All of these methods will tab-autocomplete.\nFor more information on a specific method, please see the respective docstring (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"?Loiselle"),")."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Blouin")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"dyadicLikelihood")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"LiHorvitz")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Loiselle")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Lynch")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"LynchLi")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"LynchRitland")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Moran")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"QuellerGoodnight")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Ritland")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Wang"))),Object(o.b)("h4",{id:"inbreeding"},"Inbreeding"),Object(o.b)("p",null,"Use the ",Object(o.b)("inlineCode",{parentName:"p"},"inbreeding")," keyword to specify whether to allow inbreeding (",Object(o.b)("inlineCode",{parentName:"p"},"true"),") or not (",Object(o.b)("inlineCode",{parentName:"p"},"false"),", default).\nThis is only relevant for the ",Object(o.b)("inlineCode",{parentName:"p"},"dyadicLikelihood")," method."),Object(o.b)("h4",{id:"bootstrapping"},"Bootstrapping"),Object(o.b)("p",null,"To calculate means, medians, standard errors, and confidence intervals using bootstrapping,\nset ",Object(o.b)("inlineCode",{parentName:"p"},"iterations = n")," where ",Object(o.b)("inlineCode",{parentName:"p"},"n")," is an integer greater than ",Object(o.b)("inlineCode",{parentName:"p"},"0")," (the default) corresponding to the number\nof bootstrap iterations you wish to perform for each pair. The default confidence interval is ",Object(o.b)("inlineCode",{parentName:"p"},"(0.05, 0.95)")," (i.e. 90%),\nhowever that can be changed by supplying the keyword ",Object(o.b)("inlineCode",{parentName:"p"},"interval = (low, high)")," where ",Object(o.b)("inlineCode",{parentName:"p"},"low")," and ",Object(o.b)("inlineCode",{parentName:"p"},"high")," are the intervals you want\n(as ",Object(o.b)("inlineCode",{parentName:"p"},"AbstractFloat"),"). The returned DataFrame will have 5 columns per ",Object(o.b)("inlineCode",{parentName:"p"},"method")," with bootstrapped parameters having the naming\nconvention of ",Object(o.b)("inlineCode",{parentName:"p"},"Method_parameter"),". The output may have more columns than will fit on your screen, so ",Object(o.b)("inlineCode",{parentName:"p"},"DataFrames.names(out_df)"),"\nmay be useful to see a list of the column names."),Object(o.b)("h4",{id:"resampling-methods"},"Resampling methods"),Object(o.b)("p",null,"There are two available resampling methods, ",Object(o.b)("inlineCode",{parentName:"p"},'"all"')," (default  & recommended) and ",Object(o.b)("inlineCode",{parentName:"p"},'"nonmissing"'),"."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},'"all"')," : resamples all loci for a pair of individuals and then drops missing loci between them",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"speed: slower"),Object(o.b)("li",{parentName:"ul"},"pro: better resampling variation"),Object(o.b)("li",{parentName:"ul"},"con: by chance some iterations may have a lot of missing loci that have to be dropped"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},'"nonmissing"')," : resamples only the shared non-missing loci between the pair",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"speed: faster"),Object(o.b)("li",{parentName:"ul"},"pro: every iteration guarantees the same number of loci compared between the pair"),Object(o.b)("li",{parentName:"ul"},"con: too-tight confidence intervals due to less possible variation")))),Object(o.b)("h4",{id:"examples"},"Examples"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'julia> cats = @nancycats;\n\njulia> relatedness(cats, method = Ritland)\n27966\xd74 DataFrame\n\u2502 Row   \u2502 sample_1 \u2502 sample_2 \u2502 n_loci \u2502 Ritland    \u2502\n\u2502       \u2502 String   \u2502 String   \u2502 Int64  \u2502 Float64?   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1     \u2502 N215     \u2502 N216     \u2502 8      \u2502 0.258824   \u2502\n\u2502 2     \u2502 N215     \u2502 N217     \u2502 8      \u2502 0.193238   \u2502\n\u2502 3     \u2502 N215     \u2502 N218     \u2502 8      \u2502 0.127497   \u2502\n\u22ee\n\u2502 27964 \u2502 N281     \u2502 N289     \u2502 8      \u2502 0.0892068  \u2502\n\u2502 27965 \u2502 N281     \u2502 N290     \u2502 7      \u2502 0.104614   \u2502\n\u2502 27966 \u2502 N289     \u2502 N290     \u2502 7      \u2502 0.0511663  \u2502\n\njulia> relatedness(cats, ["N7", "N111", "N115"], method = [Ritland, Wang])\n3\xd75 DataFrame\n\u2502 Row \u2502 sample_1 \u2502 sample_2 \u2502 n_loci \u2502 Ritland    \u2502 Wang      \u2502\n\u2502     \u2502 String   \u2502 String   \u2502 Int64  \u2502 Float64?   \u2502 Float64?  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 N7       \u2502 N111     \u2502 9      \u2502 -0.129432  \u2502 -0.395806 \u2502\n\u2502 2   \u2502 N7       \u2502 N115     \u2502 9      \u2502 -0.0183925 \u2502 0.0024775 \u2502\n\u2502 3   \u2502 N111     \u2502 N115     \u2502 9      \u2502 0.0240152  \u2502 0.183966  \u2502\n\njulia> relatedness(cats, ["N7", "N111", "N115"], method = [Loiselle, Moran], iterations = 100, interval = (0.025, 0.975))\n3\xd713 DataFrame. Omitted printing of 7 columns\n\u2502 Row \u2502 sample_1 \u2502 sample_2 \u2502 n_loci \u2502 Loiselle   \u2502 Loiselle_mean \u2502 Loiselle_median \u2502\n\u2502     \u2502 String   \u2502 String   \u2502 Int64  \u2502 Float64?   \u2502 Float64?      \u2502 Float64?        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 N7       \u2502 N111     \u2502 9      \u2502 -0.101618  \u2502 0.0141364     \u2502 0.00703954      \u2502\n\u2502 2   \u2502 N7       \u2502 N115     \u2502 9      \u2502 -0.0428898 \u2502 0.0743497     \u2502 0.0798708       \u2502\n\u2502 3   \u2502 N111     \u2502 N115     \u2502 9      \u2502 0.13681    \u2502 0.266043      \u2502 0.257748        \u2502\n\njulia> DataFrames.names(ans)\n13-element Array{String,1}:\n "sample_1"\n "sample_2"\n "n_loci"\n "Loiselle"\n "Loiselle_mean"\n "Loiselle_median"\n "Loiselle_SE"\n "Loiselle_CI_95"\n "Moran"\n "Moran_mean"\n "Moran_median"\n "Moran_SE"\n "Moran_CI_95"\n')))}b.isMDXComponent=!0}}]);