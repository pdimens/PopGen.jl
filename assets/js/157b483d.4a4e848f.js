(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{151:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return u}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),s=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},b=function(e){var n=s(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=s(t),m=r,u=b["".concat(i,".").concat(m)]||b[m]||d[m]||o;return t?a.a.createElement(u,p(p({ref:n},c),{},{components:t})):a.a.createElement(u,p({ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var c=2;c<o;c++)i[c]=t[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},76:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return s}));var r=t(3),a=t(7),o=(t(0),t(151)),i={id:"popgensims_cross",title:"Cross.jl",sidebar_label:"Cross.jl"},p={unversionedId:"api/PopGenSims/popgensims_cross",id:"api/PopGenSims/popgensims_cross",isDocsHomePage:!1,title:"Cross.jl",description:"sample_genotype",source:"@site/docs/api/PopGenSims/Cross.md",slug:"/api/PopGenSims/popgensims_cross",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_cross",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/api/PopGenSims/Cross.md",version:"current",lastUpdatedAt:1600452434,formattedLastUpdatedAt:"9/18/2020",sidebar_label:"Cross.jl",sidebar:"docs",previous:{title:"RelatednessMoments.jl",permalink:"/PopGen.jl/docs/api/relatednessmoments"},next:{title:"Samples.jl",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_samples"}},l=[{value:"<code>sample_genotype</code>",id:"sample_genotype",children:[]},{value:"<code>haploid_cross!</code>",id:"haploid_cross",children:[]},{value:"<code>polyploid_cross!</code>",id:"polyploid_cross",children:[]},{value:"<code>cross</code>",id:"cross",children:[]}],c={toc:l};function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"sample_genotype"},Object(o.b)("inlineCode",{parentName:"h3"},"sample_genotype")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-julia"},"sample_genotype(geno::T, n_alleles::Int) where T<:Genotype\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-julia"},"sample_genotype(geno::Missing, n_alleles::Int)\n")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"haploid_cross"},Object(o.b)("inlineCode",{parentName:"h3"},"haploid_cross!")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-julia"},"haploid_cross!(data::DataFrame, p1::T, p2::T; n::Int) where T <: GenoArray\n")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"polyploid_cross"},Object(o.b)("inlineCode",{parentName:"h3"},"polyploid_cross!")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-julia"},"polyploid_cross!(data::DataFrame, p1::T, p2::T; n::Int, ploidy::Int) where T <: GenoArray\n")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"cross"},Object(o.b)("inlineCode",{parentName:"h3"},"cross")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-julia"},'cross(data::PopData, parent1::String, parent2::String; n::Int = 100, generation::String = "F1")\n')),Object(o.b)("p",null,"Simulate a breeding cross between individuals ",Object(o.b)("inlineCode",{parentName:"p"},"parent1")," and ",Object(o.b)("inlineCode",{parentName:"p"},"parent2")," from a ",Object(o.b)("inlineCode",{parentName:"p"},"PopData")," object.\nReturns PopData consisting of ",Object(o.b)("inlineCode",{parentName:"p"},"n")," offspring resulting from the cross."),Object(o.b)("h4",{id:"keyword-arguments"},"Keyword Arguments"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"n")," : Integer of number of offspring to generate (default: ",Object(o.b)("inlineCode",{parentName:"li"},"100"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"generation")," : A string to assign ",Object(o.b)("inlineCode",{parentName:"li"},"population")," identity to the offspring (default: ",Object(o.b)("inlineCode",{parentName:"li"},'"F1"'),")")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-julia"},'cross(parent_1::Pair, parent_2::Pair, n::Int = 100, generation::String = "F1")\n')),Object(o.b)("p",null,"Simulate a breeding cross between individuals ",Object(o.b)("inlineCode",{parentName:"p"},"parent")," and ",Object(o.b)("inlineCode",{parentName:"p"},"parent2")," from two different ",Object(o.b)("inlineCode",{parentName:"p"},"PopData")," objects.\nReturns PopData consisting of ",Object(o.b)("inlineCode",{parentName:"p"},"n")," offspring resulting from the cross. ",Object(o.b)("inlineCode",{parentName:"p"},"parent_1_data")," and ",Object(o.b)("inlineCode",{parentName:"p"},"parent_2_data"),"\nare positional arguments, therefore they must be written without keywords and in the order of parents 1, parent 2. "),Object(o.b)("h4",{id:"keyword-arguments-1"},"Keyword Arguments"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"parent_1")," : Pair of ",Object(o.b)("inlineCode",{parentName:"li"},'PopData => "Parent1Name"')),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"parent_2")," : Pair of ",Object(o.b)("inlineCode",{parentName:"li"},'PopData => "Parent1Name"')),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"n")," : Integer of number of offspring to generate (default: ",Object(o.b)("inlineCode",{parentName:"li"},"100"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"generation")," : A string to assign ",Object(o.b)("inlineCode",{parentName:"li"},"population")," identity to the offspring (default: ",Object(o.b)("inlineCode",{parentName:"li"},'"F1"'),")")))}s.isMDXComponent=!0}}]);