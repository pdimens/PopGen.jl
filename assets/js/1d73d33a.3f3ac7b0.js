(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{152:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return u}));var n=a(0),o=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=o.a.createContext({}),b=function(e){var t=o.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},s=function(e){var t=b(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=b(a),m=n,u=s["".concat(i,".").concat(m)]||s[m]||d[m]||l;return a?o.a.createElement(u,r(r({ref:t},p),{},{components:a})):o.a.createElement(u,r({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=m;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:n,i[1]=r;for(var p=2;p<l;p++)i[p]=a[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},85:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return r})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return b}));var n=a(3),o=a(7),l=(a(0),a(152)),i={id:"manipulate",title:"Manipulate.jl",sidebar_label:"Manipulate.jl"},r={unversionedId:"api/manipulate",id:"api/manipulate",isDocsHomePage:!1,title:"Manipulate.jl",description:"add_meta!",source:"@site/docs/api/Manipulate.md",slug:"/api/manipulate",permalink:"/PopGen.jl/docs/api/manipulate",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/api/Manipulate.md",version:"current",lastUpdatedAt:1615155163,formattedLastUpdatedAt:"3/7/2021",sidebar_label:"Manipulate.jl",sidebar:"docs",previous:{title:"ioUtils.jl",permalink:"/PopGen.jl/docs/api/ioutils"},next:{title:"PairwiseRelatedness.jl",permalink:"/PopGen.jl/docs/api/pairwiserelatedness"}},c=[{value:"<code>add_meta!</code>",id:"add_meta",children:[]},{value:"<code>add_meta!</code>",id:"add_meta-1",children:[]},{value:"<code>locations</code>",id:"locations",children:[]},{value:"<code>locations!</code>",id:"locations-1",children:[]},{value:"<code>locations!</code>",id:"locations-2",children:[]},{value:"<code>loci</code>",id:"loci",children:[]},{value:"<code>get_genotypes</code>",id:"get_genotypes",children:[]},{value:"<code>get_sample_genotypes</code>",id:"get_sample_genotypes",children:[]},{value:"<code>locus</code>",id:"locus",children:[]},{value:"<code>populations</code>",id:"populations",children:[]},{value:"<code>populations!</code>",id:"populations-1",children:[]},{value:"<code>exclude!</code>",id:"exclude",children:[]},{value:"<code>exclude</code>",id:"exclude-1",children:[]}],p={toc:c};function b(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h3",{id:"add_meta"},Object(l.b)("inlineCode",{parentName:"h3"},"add_meta!")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"add_meta!(popdata::PopData, metadata::T; name::String, loci::Bool = true, categorical::Bool = true) where T <: AbstractVector\n")),Object(l.b)("p",null,"Add an additional metadata information to a ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," object. Mutates ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," in place. Metadata\nmust be in the same order as the samples in ",Object(l.b)("inlineCode",{parentName:"p"},"PopData.meta"),"."),Object(l.b)("h4",{id:"arguments"},"Arguments"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"popdata")," : The ",Object(l.b)("inlineCode",{parentName:"li"},"PopData")," object to add information to"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"metadata")," : A ",Object(l.b)("inlineCode",{parentName:"li"},"Vector")," with the metadata you wish to add to the ",Object(l.b)("inlineCode",{parentName:"li"},"PopData"),", in the same order as the names appear in ",Object(l.b)("inlineCode",{parentName:"li"},"PopData.meta"))),Object(l.b)("h4",{id:"keyword-arguments"},"Keyword Arguments"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name")," : String of the name of this new column"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"loci")," : Boolean of whether to also add this information to ",Object(l.b)("inlineCode",{parentName:"li"},"PopData.loci")," (default: ",Object(l.b)("inlineCode",{parentName:"li"},"true"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"categorical"),' : Boolean of whether the metadata being added is categorical aka "factors" (default: ',Object(l.b)("inlineCode",{parentName:"li"},"true"),")")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"add_meta-1"},Object(l.b)("inlineCode",{parentName:"h3"},"add_meta!")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"add_meta!(popdata::PopData, samples::Vector{String}, metadata::T; name::String, loci::Bool = true, categorical::Bool = true) where T <: AbstractVector\n")),Object(l.b)("p",null,"Add an additional metadata information to a ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," object. Mutates ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," in place. Takes a vector of\nsample names if the metadata is not in the same order as samples appear in ",Object(l.b)("inlineCode",{parentName:"p"},"PopData.meta"),"."),Object(l.b)("h4",{id:"arguments-1"},"Arguments"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"popdata")," : The ",Object(l.b)("inlineCode",{parentName:"li"},"PopData")," object to add information to"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"sample")," : A ",Object(l.b)("inlineCode",{parentName:"li"},"Vector{String}")," of sample names corresponding to the order of the ",Object(l.b)("inlineCode",{parentName:"li"},"metadata")," "),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"metadata")," : A ",Object(l.b)("inlineCode",{parentName:"li"},"Vector")," with the metadata you wish to add to the ",Object(l.b)("inlineCode",{parentName:"li"},"PopData"),", in the same order as the names appear in ",Object(l.b)("inlineCode",{parentName:"li"},"PopData.meta"))),Object(l.b)("h4",{id:"keyword-arguments-1"},"Keyword Arguments"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name")," : String of the name of this new column"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"loci")," : Boolean of whether to also add this information to ",Object(l.b)("inlineCode",{parentName:"li"},"PopData.loci")," (default: ",Object(l.b)("inlineCode",{parentName:"li"},"true"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"categorical"),' : Boolean of whether the metadata being added is categorical aka "factors" (default: ',Object(l.b)("inlineCode",{parentName:"li"},"true"),")")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"locations"},Object(l.b)("inlineCode",{parentName:"h3"},"locations")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"locations(data::PopData)\n")),Object(l.b)("p",null,"View the longitude and latitude data in a ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," object. Returns a table derived from the PopData. Changes made to this table will not alter the source ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," object."),Object(l.b)("p",null,"Use ",Object(l.b)("inlineCode",{parentName:"p"},"locations!")," to add spatial data to a ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," object."),Object(l.b)("hr",null),Object(l.b)("h3",{id:"locations-1"},Object(l.b)("inlineCode",{parentName:"h3"},"locations!")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"locations!(data::PopData; long::Vector{Float64}, lat::Vector{Float64})\n")),Object(l.b)("p",null,"Replaces existing ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," location data (longitude ",Object(l.b)("inlineCode",{parentName:"p"},"long"),", latitude ",Object(l.b)("inlineCode",{parentName:"p"},"lat"),").\nTakes ",Object(l.b)("strong",{parentName:"p"},"decimal degrees")," as a ",Object(l.b)("inlineCode",{parentName:"p"},"Vector")," of any ",Object(l.b)("inlineCode",{parentName:"p"},"AbstractFloat"),"."),Object(l.b)("h4",{id:"formatting-requirements"},"Formatting requirements"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Decimal Degrees format: ",Object(l.b)("inlineCode",{parentName:"li"},"-11.431")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Must")," use negative sign ",Object(l.b)("inlineCode",{parentName:"li"},"-")," instead of cardinal directions"),Object(l.b)("li",{parentName:"ul"},"Location data must be in the order that samples appear in your ",Object(l.b)("inlineCode",{parentName:"li"},"PopData")),Object(l.b)("li",{parentName:"ul"},"Missing data should be coded as ",Object(l.b)("inlineCode",{parentName:"li"},"missing")," values of type ",Object(l.b)("inlineCode",{parentName:"li"},"Missing")," (can be accomplished with ",Object(l.b)("inlineCode",{parentName:"li"},"replace!()"),")")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"ncats = @nancycats ;\nx = rand(237) ; y = rand(237)\nlocations!(ncats, long = x, lat = y)\n")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"locations-2"},Object(l.b)("inlineCode",{parentName:"h3"},"locations!")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"locations!(data::PopData; long::Vector{String}, lat::Vector{String})\n")),Object(l.b)("p",null,"Replaces existing ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," location data (longitude ",Object(l.b)("inlineCode",{parentName:"p"},"long"),", latitude ",Object(l.b)("inlineCode",{parentName:"p"},"lat"),"). Takes\n",Object(l.b)("strong",{parentName:"p"},"decimal minutes")," format as a ",Object(l.b)("inlineCode",{parentName:"p"},"Vector")," of ",Object(l.b)("inlineCode",{parentName:"p"},"String"),". Recommended to use ",Object(l.b)("inlineCode",{parentName:"p"},"CSV.read"),"\nfrom ",Object(l.b)("inlineCode",{parentName:"p"},"CSV.jl")," to import your spatial coordinates from a text file."),Object(l.b)("h4",{id:"formatting-requirements-1"},"Formatting requirements"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Decimal Minutes: ",Object(l.b)("inlineCode",{parentName:"li"},'"-11 43.11"')," (must use space and be a ",Object(l.b)("inlineCode",{parentName:"li"},"String"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Must")," use negative sign ",Object(l.b)("inlineCode",{parentName:"li"},"-"),' or single-letter cardinal directions like "11 43.11W"'),Object(l.b)("li",{parentName:"ul"},"Location data must be in the order that samples appear in your ",Object(l.b)("inlineCode",{parentName:"li"},"PopData")),Object(l.b)("li",{parentName:"ul"},"Missing data should be coded as the string ",Object(l.b)("inlineCode",{parentName:"li"},'"missing"')," (can be accomplished with ",Object(l.b)("inlineCode",{parentName:"li"},"replace!()"),")")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"NOTE")),Object(l.b)("p",null,"If you read in the coordinate data as 4 vectors (longitude degrees, longitude minutes, latitude degrees, latitude minutes),\nthen the easiest course of action would be to merge them into two vectors of strings\n(one for longitude, one for latitude):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'long_string = string.(lat_deg, " ", lat_min)\nlat_string = string.(long_deg, " ", long_min)\n')),Object(l.b)("p",null,"and use these as inputs into ",Object(l.b)("inlineCode",{parentName:"p"},"locations!")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'ncats = @nancycats;\nx = fill("11 22.33W", 237) ; y = fill("-41 31.52", 237)\nlocations!(ncats, long = x, lat = y)\n')),Object(l.b)("hr",null),Object(l.b)("h3",{id:"loci"},Object(l.b)("inlineCode",{parentName:"h3"},"loci")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"loci(data::PopData)\n")),Object(l.b)("p",null,"Returns an array of strings of the loci names in a ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," object."),Object(l.b)("hr",null),Object(l.b)("h3",{id:"get_genotypes"},Object(l.b)("inlineCode",{parentName:"h3"},"get_genotypes")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"get_genotypes(data::PopObj; samples::Union{String, Vector{String}}, loci::Union{String, Vector{String}})\n")),Object(l.b)("p",null,"Return the genotype(s) of one or more ",Object(l.b)("inlineCode",{parentName:"p"},"samples")," for one or more specific ",Object(l.b)("inlineCode",{parentName:"p"},"loci")," (both as keywords) in a ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," object."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},'cats = @nancycats;\nget_genotype(cats, samples = "N115" , loci = "fca8")\nget_genotypes(cats, samples = ["N1", "N2"] , loci = "fca8")\nget_genotype(cats, samples = "N115" , loci = ["fca8", "fca37"])\nget_genotype(cats, samples = ["N1", "N2"] , loci = ["fca8", "fca37"])\n')),Object(l.b)("hr",null),Object(l.b)("h3",{id:"get_sample_genotypes"},Object(l.b)("inlineCode",{parentName:"h3"},"get_sample_genotypes")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"get_sample_genotypes(data::PopData, sample::String)\n")),Object(l.b)("p",null,"Return all the genotypes of a specific sample in a ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," object. This is an extension for the internal function ",Object(l.b)("inlineCode",{parentName:"p"},"get_genotypes"),"."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},'cats = @nancycats\nget_sample_genotypes(cats, "N115")\n')),Object(l.b)("hr",null),Object(l.b)("h3",{id:"locus"},Object(l.b)("inlineCode",{parentName:"h3"},"locus")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"locus(data::PopData, locus::Union{String, Symbol})\n")),Object(l.b)("p",null,"Convenience wrapper to return a vector of all the genotypes of a single locus"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},'locus(@gulfsharks, "contig_475")\n')),Object(l.b)("hr",null),Object(l.b)("h3",{id:"populations"},Object(l.b)("inlineCode",{parentName:"h3"},"populations")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"    populations(data::PopData; counts::Bool = false)\n")),Object(l.b)("p",null,"View unique population ID's in a ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," objec"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"counts = true")," returns the number of samples per population  (default = ",Object(l.b)("inlineCode",{parentName:"li"},"false"),")")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"populations-1"},Object(l.b)("inlineCode",{parentName:"h3"},"populations!")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"populations!(data::PopData, rename::Dict)\npopulations!(data::PopData, rename::Vector{String})\npopulations!(data::PopData, samples::Vector{String}, populations::Vector{String})\n")),Object(l.b)("p",null,"Multiple methods to rename or reassign population names in",Object(l.b)("inlineCode",{parentName:"p"},"PopData"),"."),Object(l.b)("h4",{id:"rename-using-a-dictionary"},"Rename using a Dictionary"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"populations!(data::PopData, rename::Dict)\n")),Object(l.b)("p",null,"Rename existing population ID's of ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," using a ",Object(l.b)("inlineCode",{parentName:"p"},"Dict")," of\n",Object(l.b)("inlineCode",{parentName:"p"},"population_name => replacement")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'potatopops = Dict("1" => "Idaho", "2" => "Russet")\npopulations!(potatoes, potatopops)\n')),Object(l.b)("h4",{id:"rename-using-a-vector-of-strings"},"Rename using a Vector of Strings"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"populations!(data::PopData, rename::Vector{String})\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Vector")," of new unique population names in the order that they appear in the PopData.meta"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'potatopops = ["Idaho", "Russet"]\npopulations!(potatoes, potatopops)\n')),Object(l.b)("h4",{id:"reassign-using-samples-and-new-population-assignments"},"Reassign using samples and new population assignments"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"populations!(data::PopData, samples::Vector{String}, populations::Vector{String})\n")),Object(l.b)("p",null,"Completely reassign populations for each individual. Takes two vectors of strings\nas input: one of the sample names, and the other with their new corresponding\npopulation name."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'populations!(potatoes, ["potato_1", "potato_2"], ["north_russet", "south_russet"])\n')),Object(l.b)("hr",null),Object(l.b)("h3",{id:"exclude"},Object(l.b)("inlineCode",{parentName:"h3"},"exclude!")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"exclude!(data::PopData, kwargs...)\nremove!(data::PopData, kwargs...)\nomit!(data::PopData, kwargs...)\n")),Object(l.b)("p",null,"Edit a ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," object in-place by excluding all occurences of the specified information.\nThe keywords can be used in any combination. Synonymous with ",Object(l.b)("inlineCode",{parentName:"p"},"omit!")," and ",Object(l.b)("inlineCode",{parentName:"p"},"remove!"),"."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Keyword Arguments")),Object(l.b)("p",null,"-",Object(l.b)("inlineCode",{parentName:"p"},"locus"),": A ",Object(l.b)("inlineCode",{parentName:"p"},"String")," or ",Object(l.b)("inlineCode",{parentName:"p"},"Vector{String}")," of loci you want to remove from the ",Object(l.b)("inlineCode",{parentName:"p"},"PopData"),"."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"- The keyword `loci` also works.\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"population"),": A ",Object(l.b)("inlineCode",{parentName:"li"},"String")," or ",Object(l.b)("inlineCode",{parentName:"li"},"Vector{String}")," of populations you want to remove from the ",Object(l.b)("inlineCode",{parentName:"li"},"PopData"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The keyword ",Object(l.b)("inlineCode",{parentName:"li"},"populations")," also works."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name"),": A ",Object(l.b)("inlineCode",{parentName:"li"},"String")," or ",Object(l.b)("inlineCode",{parentName:"li"},"Vector{String}")," of samples you want to remove from the ",Object(l.b)("inlineCode",{parentName:"li"},"PopData"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The keywords ",Object(l.b)("inlineCode",{parentName:"li"},"names"),", ",Object(l.b)("inlineCode",{parentName:"li"},"sample"),", and ",Object(l.b)("inlineCode",{parentName:"li"},"samples")," also work.")))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Examples")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},'cats = @nancycats;\nexclude!(cats, name = "N100", population = ["1", "15"])\nexclude!(cats, samples = ["N100", "N102", "N211"], locus = ["fca8", "fca23"])\nexclude!(cats, names = "N102", loci = "fca8", population = "3")\n')),Object(l.b)("hr",null),Object(l.b)("h3",{id:"exclude-1"},Object(l.b)("inlineCode",{parentName:"h3"},"exclude")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"exclude(data::PopData, kwargs...)\nremove(data::PopData, kwargs...)\nomit(data::PopData, kwargs...)\n")),Object(l.b)("p",null,"Returns a new ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," object excluding all occurrences of the specified keywords.\nThe keywords can be used in any combination. Synonymous with ",Object(l.b)("inlineCode",{parentName:"p"},"omit")," and ",Object(l.b)("inlineCode",{parentName:"p"},"remove"),"."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Keyword Arguments")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"locus"),": A ",Object(l.b)("inlineCode",{parentName:"li"},"String")," or ",Object(l.b)("inlineCode",{parentName:"li"},"Vector{String}")," of loci you want to remove from the ",Object(l.b)("inlineCode",{parentName:"li"},"PopData"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The keyword ",Object(l.b)("inlineCode",{parentName:"li"},"loci")," also works."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"population"),": A ",Object(l.b)("inlineCode",{parentName:"li"},"String")," or ",Object(l.b)("inlineCode",{parentName:"li"},"Vector{String}")," of populations you want to remove from the ",Object(l.b)("inlineCode",{parentName:"li"},"PopData"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The keyword ",Object(l.b)("inlineCode",{parentName:"li"},"populations")," also works."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name"),": A ",Object(l.b)("inlineCode",{parentName:"li"},"String")," or ",Object(l.b)("inlineCode",{parentName:"li"},"Vector{String}")," of samples you want to remove from the ",Object(l.b)("inlineCode",{parentName:"li"},"PopData"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The keywords ",Object(l.b)("inlineCode",{parentName:"li"},"names"),", ",Object(l.b)("inlineCode",{parentName:"li"},"sample"),", and ",Object(l.b)("inlineCode",{parentName:"li"},"samples")," also work.")))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Examples")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},'cats = @nancycats;\nexclude(cats, name = "N100", population = ["1", "15"])\nexclude(cats, samples = ["N100", "N102", "N211"], locus = ["fca8", "fca23"])\nexclude(cats, names = "N102", loci = "fca8", population = "3")\n')))}b.isMDXComponent=!0}}]);