(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{113:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),l=(n(0),n(151)),i={id:"structure",title:"Structure.jl",sidebar_label:"Structure.jl"},o={unversionedId:"api/structure",id:"api/structure",isDocsHomePage:!1,title:"Structure.jl",description:"phase_structure",source:"@site/docs/api/Structure.md",slug:"/api/structure",permalink:"/PopGen.jl/docs/api/structure",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/api/Structure.md",version:"current",lastUpdatedAt:1609339045,formattedLastUpdatedAt:"12/30/2020",sidebar_label:"Structure.jl",sidebar:"docs",previous:{title:"Utils.jl",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_utils"},next:{title:"SummaryInfo.jl",permalink:"/PopGen.jl/docs/api/summaryinfo"}},c=[{value:"<code>phase_structure</code>",id:"phase_structure",children:[]},{value:"<code>structure</code>",id:"structure",children:[]},{value:"<code>structure</code>",id:"structure-1",children:[]},{value:"keyword arguments",id:"keyword-arguments-1",children:[]}],u={toc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h3",{id:"phase_structure"},Object(l.b)("inlineCode",{parentName:"h3"},"phase_structure")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"phase_structure(datatype::DataType, args...)\n")),Object(l.b)("p",null,"Takes a DataType (such as ",Object(l.b)("inlineCode",{parentName:"p"},"Int8"),") and a series of integers to return\na sorted Tuple of those integers converted to that DataType. i.e. takes\na series of alleles and returns a genotype. Returns ",Object(l.b)("inlineCode",{parentName:"p"},"missing")," if args are\n",Object(l.b)("inlineCode",{parentName:"p"},"missing"),". Used internally in PopGen.structure file reader."),Object(l.b)("h4",{id:"example"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"phase_structure(Int8, 1,2,3,4,3,4,6,1)\n(1, 1, 2, 3, 3, 4, 4, 6)\n\nphase_structure(Int16, missing, missing)\nmissing\n")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"structure"},Object(l.b)("inlineCode",{parentName:"h3"},"structure")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"    structure(infile::String; kwargs...)\n")),Object(l.b)("p",null,"Load a Structure format file into memory as a PopData object."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"infile::String")," : path to Structure file")),Object(l.b)("h4",{id:"keyword-arguments"},"Keyword Arguments"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"extracols::Integer"),": how many additional optional columns there are beyond Stucture's POPDATA the reader needs to ignore (default: ",Object(l.b)("inlineCode",{parentName:"li"},"0"),")",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"these include POPFLAG, LOCDATA, or anything else you might have added"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"extrarows::Integer")," : how many additional optional rows there are beyond the first row of locus names (default: ",Object(l.b)("inlineCode",{parentName:"li"},"0"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"missingval::String"),"  : the value used to identify missing values in the data (default: ",Object(l.b)("inlineCode",{parentName:"li"},'"-9"'),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"silent::Bool"),"   : whether to print file information during import (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"allow_monomorphic::Bool")," : whether to keep monomorphic loci in the dataset (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"faststructure::Bool"),": whether the file is fastStructure format (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),")")),Object(l.b)("h4",{id:"file-must-follow-this-structure-format"},"File must follow this Structure format:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"the file is ",Object(l.b)("inlineCode",{parentName:"li"},"tab")," or ",Object(l.b)("inlineCode",{parentName:"li"},"space")," delimited ",Object(l.b)("strong",{parentName:"li"},"but not both")),Object(l.b)("li",{parentName:"ul"},"first row is locus names separated by the delimiter",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"leading/trailing whitespaces are tolerated"),Object(l.b)("li",{parentName:"ul"},"optional rows allowed ",Object(l.b)("strong",{parentName:"li"},"after")," the locus names"))),Object(l.b)("li",{parentName:"ul"},"number of rows per sample = ploidy",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"e.g. if diploid, that sample would have 2 rows"),Object(l.b)("li",{parentName:"ul"},"multi-column variant not supported"))),Object(l.b)("li",{parentName:"ul"},"first data column is sample name"),Object(l.b)("li",{parentName:"ul"},"second data column is population ID",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"optional columns allowed ",Object(l.b)("strong",{parentName:"li"},"after")," the population ID (2nd) column"))),Object(l.b)("li",{parentName:"ul"},"remaining columns are the genotype for that individual for that locus")),Object(l.b)("h4",{id:"structure-file-example"},"Structure file example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"locus_1 locus_2 locus_3 locus_4 locus_5\nwalnut_01   1   -9  145 66  0   92\nwalnut_01   1   -9  -9  64  0   94\nwalnut_02   1   106 142 68  1   92\nwalnut_02   1   106 148 64  0   94\nwalnut_03   2   110 145 -9  0   92\nwalnut_03   2   110 148 66  1   -9\n")),Object(l.b)("h4",{id:"faststructure-file-format"},"fastStructure file format:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"the file is ",Object(l.b)("inlineCode",{parentName:"li"},"tab")," or ",Object(l.b)("inlineCode",{parentName:"li"},"space")," delimited ",Object(l.b)("strong",{parentName:"li"},"but not both")),Object(l.b)("li",{parentName:"ul"},"no first row of loci names"),Object(l.b)("li",{parentName:"ul"},"number of rows per sample = ploidy",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"e.g. if diploid, that sample would have 2 rows"))),Object(l.b)("li",{parentName:"ul"},"first data column is sample name"),Object(l.b)("li",{parentName:"ul"},"second data column is population ID"),Object(l.b)("li",{parentName:"ul"},"remaining columns are the genotype for that individual for that locus"),Object(l.b)("li",{parentName:"ul"},"usually, first 6 colums are empty (but not necessary)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"no")," extra rows or columns.")),Object(l.b)("h4",{id:"faststructure-file-example"},"fastStructure file example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"chestnut_01 1   -9  145 66  0   92\nchestnut_01 1   -9  -9  64  0   94\nchestnut_02 1   106 142 68  1   92\nchestnut_02 1   106 148 64  0   94\nchestnut_03 2   110 145 -9  0   92\nchestnut_03 2   110 148 66  1   -9\n")),Object(l.b)("h4",{id:"example-1"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'walnuts = structure("juglans_nigra.str", extracols = 0, extrarows = 0)\n')),Object(l.b)("hr",null),Object(l.b)("h3",{id:"structure-1"},Object(l.b)("inlineCode",{parentName:"h3"},"structure")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-julia"},"structure(data::PopData; filename::String, faststructure::Bool, delim::String)\n")),Object(l.b)("p",null,"Write a ",Object(l.b)("inlineCode",{parentName:"p"},"PopData")," object to a Stucture format file"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"data"),": the ",Object(l.b)("inlineCode",{parentName:"li"},"PopData")," object you wish to convert to a Structure file")),Object(l.b)("h3",{id:"keyword-arguments-1"},"keyword arguments"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"filename"),": a ",Object(l.b)("inlineCode",{parentName:"li"},"String")," of the output filename"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"delim")," : a ",Object(l.b)("inlineCode",{parentName:"li"},"String")," of either ",Object(l.b)("inlineCode",{parentName:"li"},'"tab"')," or ",Object(l.b)("inlineCode",{parentName:"li"},'"space"')," indicating the delimiter (default: ",Object(l.b)("inlineCode",{parentName:"li"},'"tab"'),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"faststructure"),": true/false of whether the output should be formatted for fastStructure (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),")")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'cats = @nancycats;\nfewer_cats = omit(cats, name = samples(cats)[1:10]);\nstructure(fewer_cats, filename = "filtered_nancycats.str", faststructure = true)\n')))}b.isMDXComponent=!0},151:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),b=function(e){var t=r.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=b(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=b(n),m=a,d=s["".concat(i,".").concat(m)]||s[m]||p[m]||l;return n?r.a.createElement(d,o(o({ref:t},u),{},{components:n})):r.a.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);