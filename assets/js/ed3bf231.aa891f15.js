(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{143:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return s}));var n=a(3),o=a(7),i=(a(0),a(152)),r={id:"types",title:"PopObj and PopData types",sidebar_label:"PopObj and PopData types"},l={unversionedId:"getting_started/types",id:"getting_started/types",isDocsHomePage:!1,title:"PopObj and PopData types",description:"For the PopGen.jl package to be consistent, a standard flexible data structure needs to be defined. The solution is a custom type called  PopData. The struct is defined as:",source:"@site/docs/getting_started/popobj_type.md",slug:"/getting_started/types",permalink:"/PopGen.jl/docs/getting_started/types",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/getting_started/popobj_type.md",version:"current",lastUpdatedAt:1605652600,formattedLastUpdatedAt:"11/17/2020",sidebar_label:"PopObj and PopData types",sidebar:"docs",previous:{title:"Comparison",permalink:"/PopGen.jl/docs/getting_started/comparison"},next:{title:"Other data types",permalink:"/PopGen.jl/docs/getting_started/other_types"}},c=[{value:"Metadata",id:"metadata",children:[{value:"name",id:"name",children:[]},{value:"population",id:"population",children:[]},{value:"ploidy",id:"ploidy",children:[]},{value:"longitude",id:"longitude",children:[]},{value:"latitude",id:"latitude",children:[]}]},{value:"Genotype Information",id:"genotype-information",children:[{value:"name",id:"name-1",children:[]},{value:"population",id:"population-1",children:[]},{value:"locus",id:"locus",children:[]},{value:"genotype",id:"genotype",children:[]}]},{value:"Acknowledgements",id:"acknowledgements",children:[]}],p={toc:c};function s(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"For the PopGen.jl package to be consistent, a standard flexible data structure needs to be defined. The solution is a custom type called  ",Object(i.b)("inlineCode",{parentName:"p"},"PopData"),". The struct is defined as:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},"struct PopData\n    meta::DataFrame\n    loci::DataFrame\nend\n")),Object(i.b)("p",null,"As you can see, a ",Object(i.b)("inlineCode",{parentName:"p"},"PopData")," is made up of two DataFrames, one called ",Object(i.b)("inlineCode",{parentName:"p"},"meta")," for sample information (metadata), and the other called ",Object(i.b)("inlineCode",{parentName:"p"},"loci")," which includes genotype information. This structure allows for easy and convenient access to the fields using dot ",Object(i.b)("inlineCode",{parentName:"p"},".")," accessors.. The ",Object(i.b)("inlineCode",{parentName:"p"},"meta")," and ",Object(i.b)("inlineCode",{parentName:"p"},"loci")," tables are both specific in their structure, so here is an illustration to help you visualize a ",Object(i.b)("inlineCode",{parentName:"p"},"PopData")," object:"),Object(i.b)("p",null,Object(i.b)("img",{alt:"PopData",src:a(248).default})),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"PopData")," and other custom types introduced in PopGen.jl fall under an AbstractType we call ",Object(i.b)("inlineCode",{parentName:"p"},"PopObj"),', which is short for "PopGen Object".'),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),'pronouncing "PopObj"')),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},'It\'s not super obvious, but we decided to pronounce PopObj as "pop ob" with a silent j because it sounds better than saying "pop obj", but writing it as PopOb looks weird. It\'s a silly little detail that Pavel seems to care a lot about.'))),Object(i.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"avoid manual creation!")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"While it may seem simple enough to create two DataFrames and make a ",Object(i.b)("inlineCode",{parentName:"p"},"PopData")," out of them, the structure of ",Object(i.b)("inlineCode",{parentName:"p"},"meta")," and ",Object(i.b)("inlineCode",{parentName:"p"},"loci")," are specific, so small mistakes in creating them can create many errors and prevent PopGen from working correctly on your data. Please use the included ",Object(i.b)("inlineCode",{parentName:"p"},"csv"),", ",Object(i.b)("inlineCode",{parentName:"p"},"genepop"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"vcf")," file importers instead."))),Object(i.b)("h2",{id:"metadata"},"Metadata"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"meta")," table has 5 specific categories/columns: name, population, ploidy, longitude, latitude. These can be directly accessed with ",Object(i.b)("inlineCode",{parentName:"p"},"PopData.meta.colname")," where ",Object(i.b)("inlineCode",{parentName:"p"},"PopData")," is the name of your PopData object, and ",Object(i.b)("inlineCode",{parentName:"p"},"colname")," is one of the five column names below."),Object(i.b)("h3",{id:"name"},"name"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"::Vector{String}")),Object(i.b)("p",null,"The individual/sample names"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},'["ind_001", "ind_002", "ind_003"]\n')),Object(i.b)("h3",{id:"population"},"population"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"::Vector{String}")),Object(i.b)("p",null,"The individual/sample population ID's"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},'["borneo", "borneo", "new jersey"]\n')),Object(i.b)("h3",{id:"ploidy"},"ploidy"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"::Vector{Int8}")),Object(i.b)("p",null,"The ploidy of the samples"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},"[2, 2, 2]\n")),Object(i.b)("h3",{id:"longitude"},"longitude"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"::Vector{Union{Missing,Float32}}")),Object(i.b)("p",null,"latitude data of samples (decimal degrees)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"[-11.12, 15.32, 11.02, -4.42]\n")),Object(i.b)("h3",{id:"latitude"},"latitude"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"::Vector{Union{Missing,Float64}}")),Object(i.b)("p",null,"longitude data of samples (decimal degrees)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"[-11.12, 15.32, 11.02, -4]\n")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"location data")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Location data is optional for ",Object(i.b)("inlineCode",{parentName:"p"},"PopData"),". There are functions that use location information (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"locations"),"), but most don't, so it's not a dealbreaker. At present, there are no analyses that utilize location information. "))),Object(i.b)("h2",{id:"genotype-information"},"Genotype Information"),Object(i.b)("p",null,"The genotype information is stored in a separate table called ",Object(i.b)("inlineCode",{parentName:"p"},"loci"),'. This table is rather special in that it is stored in "tidy" format, i.e. one record per row. Storing data this way makes it a lot easier to interrogate the data and write new functions. It also means the table will have as many rows as loci x samples, which can become a lot. To reduce redundant objects inflating object size, the columns name, population, and locus are each a special type of compressed vector from ',Object(i.b)("a",{parentName:"p",href:"https://github.com/JuliaData/PooledArrays.jl"},"PooledArrays.jl"),", which is a memory-saving data structure for long repetitive categorical data. Without using this format, ",Object(i.b)("inlineCode",{parentName:"p"},"gulfsharks"),", whose source file is 3.2mb, would occupy about 27mb in your RAM! The classes of ",Object(i.b)("inlineCode",{parentName:"p"},".loci")," can be directly accessed with ",Object(i.b)("inlineCode",{parentName:"p"},"PopData.loci.colname")," where ",Object(i.b)("inlineCode",{parentName:"p"},"PopData")," is the name of your PopData object, and ",Object(i.b)("inlineCode",{parentName:"p"},"colname")," is one of the four column names below. For clarity, the columns will be represented below as though they are regular vectors."),Object(i.b)("h3",{id:"name-1"},"name"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"::Vector{String}")),Object(i.b)("p",null,"The sample name, stored as a ",Object(i.b)("inlineCode",{parentName:"p"},"PooledArray")," of eltype ",Object(i.b)("inlineCode",{parentName:"p"},"String"),". Fundamentally, this acts like the ",Object(i.b)("inlineCode",{parentName:"p"},"name")," column of the ",Object(i.b)("inlineCode",{parentName:"p"},"meta")," table, except when deleting entries and a few uncommon edge cases."),Object(i.b)("h3",{id:"population-1"},"population"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"::Vector{String}")),Object(i.b)("p",null,"The population ID associated with that sample,stored as a ",Object(i.b)("inlineCode",{parentName:"p"},"PooledArray")," of eltype ",Object(i.b)("inlineCode",{parentName:"p"},"String"),". Fundamentally, this acts like the ",Object(i.b)("inlineCode",{parentName:"p"},"population")," column of the ",Object(i.b)("inlineCode",{parentName:"p"},"meta")," table, except when deleting entries and a few uncommon edge cases."),Object(i.b)("h3",{id:"locus"},"locus"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"::Vector{String}")),Object(i.b)("p",null,"The locus associated with the genotype, stored as a ",Object(i.b)("inlineCode",{parentName:"p"},"PooledArray")," of eltype ",Object(i.b)("inlineCode",{parentName:"p"},"String"),"."),Object(i.b)("h3",{id:"genotype"},"genotype"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"::Vector{Union{Missing,Genotype}}")),Object(i.b)("p",null,"The genotypes of the ",Object(i.b)("inlineCode",{parentName:"p"},"loci")," are an array of type ",Object(i.b)("inlineCode",{parentName:"p"},"Genotype"),", which is ",Object(i.b)("a",{parentName:"p",href:"/PopGen.jl/docs/getting_started/other_types"},"an alias")," for a built-in Julia Tuple type with each value corresponding to an allele. For the most part, it looks like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},"[(0,1), (0,0), missing, (1,2)]\n")),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"immutable genotypes")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"We use the Tuple type for genotypes of individuals because they are ",Object(i.b)("strong",{parentName:"p"},"immutable")," (cannot be changed). By the time you're using PopGen.jl, your data should already be filtered and screened. Hand-editing of genotype alleles is ",Object(i.b)("strong",{parentName:"p"},"strongly")," discouraged, so we outlawed it."))),Object(i.b)("hr",null),Object(i.b)("h2",{id:"acknowledgements"},"Acknowledgements"),Object(i.b)("p",null,"A ",Object(i.b)("em",{parentName:"p"},"lot")," of what's possible in PopGen.jl is thanks to the tireless work of the contributors and maintainers of ",Object(i.b)("a",{parentName:"p",href:"https://github.com/JuliaData/DataFrames.jl"},"DataFrames.jl"),". It's no small task to come up with and maintain a robust, performant, and sensible tabular data type, and they deserve so much credit for it. "))}s.isMDXComponent=!0},152:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return u}));var n=a(0),o=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,r=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(a),m=n,u=d["".concat(r,".").concat(m)]||d[m]||b[m]||i;return a?o.a.createElement(u,l(l({ref:t},p),{},{components:a})):o.a.createElement(u,l({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,r[1]=l;for(var p=2;p<i;p++)r[p]=a[p];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},248:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/PopData-c51e5295012038099f3e9bb7a551e0c8.svg"}}]);