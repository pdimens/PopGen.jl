(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{101:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(151)),b={id:"read",title:"Read.jl",sidebar_label:"Read.jl"},c={unversionedId:"api/read",id:"api/read",isDocsHomePage:!1,title:"Read.jl",description:"read_from",source:"@site/docs/api/Read.md",slug:"/api/read",permalink:"/PopGen.jl/docs/api/read",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/api/Read.md",version:"current",lastUpdatedAt:1615218051,formattedLastUpdatedAt:"3/8/2021",sidebar_label:"Read.jl",sidebar:"docs",previous:{title:"Permutations.jl",permalink:"/PopGen.jl/docs/api/permutations"},next:{title:"RelatednessMoments.jl",permalink:"/PopGen.jl/docs/api/relatednessmoments"}},l=[{value:"<code>read_from</code>",id:"read_from",children:[]},{value:"<code>write_to</code>",id:"write_to",children:[]}],o={toc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"read_from"},Object(i.b)("inlineCode",{parentName:"h3"},"read_from")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},"read_from(infile::String; kwargs...)\n")),Object(i.b)("p",null,"Wraps ",Object(i.b)("inlineCode",{parentName:"p"},"delimited()"),", ",Object(i.b)("inlineCode",{parentName:"p"},"genepop()"),", ",Object(i.b)("inlineCode",{parentName:"p"},"structure()"),", ",Object(i.b)("inlineCode",{parentName:"p"},"bcf()"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"vcf()")," to read a file in as ",Object(i.b)("inlineCode",{parentName:"p"},"PopData"),". File type is\ninferred from the file extension (case insensitive):"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"File Format"),Object(i.b)("th",{parentName:"tr",align:"left"},"Extensions"),Object(i.b)("th",{parentName:"tr",align:"left"},"Docstring"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"delimited"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},".csv"),", ",Object(i.b)("inlineCode",{parentName:"td"},".txt"),", ",Object(i.b)("inlineCode",{parentName:"td"},"tsv")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"?delimited"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"genepop"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},".gen"),", ",Object(i.b)("inlineCode",{parentName:"td"},".genepop")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"?genepop"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"Structure/fastStructure"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},".str"),", ",Object(i.b)("inlineCode",{parentName:"td"},".structure")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"?structure"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"variant call format"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},".vcf"),", ",Object(i.b)("inlineCode",{parentName:"td"},".bcf")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"?vcf"),", ",Object(i.b)("inlineCode",{parentName:"td"},"?bcf"))))),Object(i.b)("p",null,"This function uses the same keyword arguments (and defaults) as the file importing functions it wraps; please see their respective docstrings in the Julia help console. (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"?genepop"),") for specific usage details. Use the alias function ",Object(i.b)("inlineCode",{parentName:"p"},"file_import")," interchangeably if you prefer the explicit name instead."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},'read_from("cavernous_assfish.gen", digits = 3)\nfile_import("bos_tauros.csv", silent = true)\nread_from("juglans_nigra.vcf")\n')),Object(i.b)("hr",null),Object(i.b)("h3",{id:"write_to"},Object(i.b)("inlineCode",{parentName:"h3"},"write_to")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-julia"},"write_to(data::PopData; filename::String, kwargs...)\n")),Object(i.b)("p",null,"Writes ",Object(i.b)("inlineCode",{parentName:"p"},"PopData")," to a specified file type inferred from the extension of ",Object(i.b)("inlineCode",{parentName:"p"},"filename = ")," (case insensitive). Additional keyword\narguments ",Object(i.b)("inlineCode",{parentName:"p"},"kwargs...")," are specific to the intended file type, and are listed in the docstrings of the specific\nfile writer with the format ",Object(i.b)("inlineCode",{parentName:"p"},"?filetype"),". For example, to find the appropriate keywords for a conversion\nto Genepop format, call up the docstring to ",Object(i.b)("inlineCode",{parentName:"p"},"genepop")," with ",Object(i.b)("inlineCode",{parentName:"p"},"?genepop"),"."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"File Format"),Object(i.b)("th",{parentName:"tr",align:"left"},"Extensions"),Object(i.b)("th",{parentName:"tr",align:"left"},"Docstring"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"genepop"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},".gen"),", ",Object(i.b)("inlineCode",{parentName:"td"},".genepop")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"?genepop"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"structure"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},".str"),", ",Object(i.b)("inlineCode",{parentName:"td"},".structure")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"?structure"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"delimited"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},".csv"),", ",Object(i.b)("inlineCode",{parentName:"td"},".txt"),", ",Object(i.b)("inlineCode",{parentName:"td"},".tsv")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"?delimited"))))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'cats = @nancycats;\nfewer_cats = omit_samples(cats, samples(cats)[1:10]);\nwrite_to(fewer_cats, filename = "filtered_nancycats.gen", digits = 3, format = "h")\n')))}p.isMDXComponent=!0},151:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,b=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),d=p(n),s=a,f=d["".concat(b,".").concat(s)]||d[s]||m[s]||i;return n?r.a.createElement(f,c(c({ref:t},o),{},{components:n})):r.a.createElement(f,c({ref:t},o))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,b=new Array(i);b[0]=s;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,b[1]=c;for(var o=2;o<i;o++)b[o]=n[o];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);